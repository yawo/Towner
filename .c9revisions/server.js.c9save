{"ts":1342170684540,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Auth Keys\r\n\r\nvar FLICKR_KEY          = '15a7e0491bf5b3fc921ce7ccea8d7727';\r\nvar FLICKR_SECRET       = '452b077e4c78db39';\r\n\r\nvar FACEBOOK_APP_ID     = '281707958585235'; \r\nvar FACEBOOK_APP_SECRET = 'd0fd783c08659809fa3fe6da7647de0c';\r\n\r\nvar TWITTER_APP_ID      = 'cJrWnw1NgQ8PJb7J0QbRw'; \r\nvar TWITTERK_APP_SECRET = '8FvfzmM31qIvKrUR1fhrtNRHFcK0w4IGOEImqWI';\r\n\r\n//Authentication. (Passport)\r\nvar passport            = require('passport')\r\n  , util                = require('util')\r\n  , fs                  = require('fs')\r\n  , GoogleStrategy      = require('passport-google').Strategy\r\n  , FacebookStrategy    = require('passport-facebook').Strategy\r\n  , TwitterStrategy     = require('passport-twitter').Strategy;\r\n  \r\n\r\npassport.serializeUser(function(user, done) {\r\n  done(null, user);\r\n});\r\n\r\npassport.deserializeUser(function(obj, done) {\r\n  done(null, obj);\r\n});\r\n\r\nvar enums = {\r\n    scores:{mark:2,like:1,unlike:-1,erronous:-2}\r\n};\r\n\r\nvar express = require('express');\r\n\r\n\r\n\r\n//var app = module.exports = express.createServer(); <-- This causes errors on Heroku.\r\nvar app = express.createServer();\r\nvar socketio = require('socket.io');\r\nvar io  = socketio.listen(app);\r\nvar appPort = (process.env.PORT || process.env['app_port'] || 3000); \r\n\r\n/************* REDIS ***************/\r\n\r\n//Redis for socket.io : real time stats. broadcasting etc.\r\nvar redisPort   = 9002,redisHost ='panga.redistogo.com', redisPass ='5f5a23fad61370502faadb5bcb860bfa';\r\n//Redis for session management\r\nvar redisPort2   = 9136,redisHost2 ='panga.redistogo.com', redisPass2 ='309af1d4ee9e9a950f52ebe9bd6343cc';\r\nvar redisExpress = require(\"redis\");\r\nvar redis = require('socket.io/node_modules/redis');\r\n//redis.debug_mode = true;\r\n\r\n\r\nvar RedisStore = require('connect-redis')(express);\r\nvar client = redisExpress.createClient(redisPort2,redisHost2);\r\nclient.on(\"error\", function (err) {\r\n    console.log(\"Error connecting to Redis (check auth) \" + err);  \r\n});\r\nclient.auth(redisPass2,redisExpress.print);\r\n\r\nvar sessionRedisStore = new RedisStore({client:client});\r\n\r\nvar statsPub=redis.createClient(redisPort,redisHost);\r\nstatsPub.on(\"error\", function (err) {\r\n    console.log(\"Error connecting to Stats Redis (check auth) \" + err);  \r\n});\r\nstatsPub.auth(redisPass,redis.print);\r\nvar statsSub=redis.createClient(redisPort,redisHost);\r\nstatsSub.on(\"error\", function (err) {\r\n    console.log(\"Error connecting to Stats Redis (check auth) \" + err);  \r\n});\r\nstatsSub.auth(redisPass,redis.print);\r\nvar statsClient=redis.createClient(redisPort,redisHost);\r\nstatsClient.on(\"error\", function (err) {\r\n    console.log(\"Error connecting to Stats Redis (check auth) \" + err);  \r\n});\r\nstatsClient.auth(redisPass,redis.print);\r\n\r\nvar socketRedisOpts = {redisSub:statsSub,redisPub:statsPub,redisClient:statsClient};\r\nvar sessionSecret = 'keyboard cat';\r\n \r\nvar MONGO_URL       = \"mongodb://root:root@ds033047.mongolab.com:33047/product\";\r\nvar MONGO_USERS_URL = \"mongodb://townerlabs:mohafada@dbh75.mongolab.com:27757/users\";\r\nvar connect = require('./node_modules/express/node_modules/connect/lib/connect');\r\nvar parseCookie = connect.utils.parseCookie;\r\nvar Session = connect.middleware.session.Session;\r\n// Configuration\r\napp.configure(function(){\r\n  app.set('delait_protocol','http');\r\n  app.set('dealit_host','googlemaps.mcguy.c9.io');   //HEROKU\r\n  app.set('dealit_port',80);//appPort);\r\n  app.set('redis_port',redisPort2);\r\n  app.set('redis_host',redisHost2);\r\n  app.set('redis_auth',redisPass2); \r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'jade');\r\n  app.set('view options', {layout:false});\r\n  app.use(express.bodyParser({uploadDir:'./uploads'}));\r\n  app.use(express.methodOverride());  \r\n  app.use(express.cookieParser(sessionSecret));\r\n  app.use(express.session({ store: sessionRedisStore, secret: sessionSecret , key: 'express.sid' }));\r\n  //app.use(express.session({ secret: \"keyboard cat\" }));\r\n  app.use(passport.initialize());\r\n  app.use(express.static(__dirname + '/public'));\r\n  app.use(app.router);\r\n  \r\n});\r\napp.configure('development', function(){\r\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\r\n});\r\napp.configure('production', function(){\r\n  app.use(express.errorHandler());\r\n});\r\n\r\nio.configure( function(){  \r\n    io.set('store',new socketio.RedisStore(socketRedisOpts));\r\n    io.enable('browser client minification');  // send minified client\r\n    io.enable('browser client etag');          // apply etag caching logic based on version number\r\n    //io.enable('browser client gzip');          // gzip the file\r\n    io.set('log level', 1);                    // reduce logging with 1. raisable to 3\r\n    io.set('transports', [                     // enable all transports (optional if you want flashsocket)\r\n        'websocket'\r\n        //, 'flashsocket'\r\n        , 'htmlfile'\r\n        , 'xhr-polling'\r\n        , 'jsonp-polling'\r\n    ]);\r\n    //io.set(\"transports\", [\"xhr-polling\"]);  //HEROKU\r\n    //io.set(\"polling duration\", 10);         //HEROKU\r\n});\r\n\r\nio.set('authorization', function (data, accept) {\r\n     if (data.headers.cookie) {\r\n        data.cookie = parseCookie(data.headers.cookie);\r\n        data.sessionID = data.cookie['express.sid'];\r\n        // save the session store to the data object \r\n        // (as required by the Session constructor)\r\n        //data.sessionStore = sessionRedisStore;\r\n        sessionRedisStore.load(data.sessionID, function (err, session,t) {            \r\n            if (err || !session) {\r\n                console.log(\"err\",err,\"session:\",session,\"t\",t);\r\n                return accept(err.message, false);\r\n            }\r\n        \r\n            data.session = session;\r\n            return accept(null, true);\r\n         });\r\n        /*sessionRedisStore.get(data.sessionID, function (err, session) {\r\n            if (err || !session) {\r\n                accept('Error', false);\r\n            } else {\r\n                // create a session object, passing data as request and our\r\n                // just acquired session data\r\n                var req, _ref;\r\n                if (session && !((_ref = session.prototype) != null ? _ref.reload : void 0)) {\r\n                  req = {\r\n                    sessionStore: sessionRedisStore,\r\n                    sessionID: data.sessionID\r\n                  };\r\n                  session = new express.session.Session(req, session);\r\n                }\r\n         \r\n                data.session = new Session(data, session);\r\n                accept(null, true);\r\n            }\r\n        });*/\r\n    } else {\r\n        // Check to see if the conection is made from the server\r\n        // ~ auth with token\r\n        if (data.query.secret_keyword\r\n             //&& (data.query.secret_keyword === configs.secret_keyword)\r\n             )\r\n        {\r\n          console.log(\"secrets\",data.query.secret_keyword,configs.secret_keyword);\r\n          return accept(null, true);\r\n        }\r\n       return accept('No cookie transmitted.', false);\r\n    }\r\n});\r\n\r\n/************ socket.io ***********/\r\n/*io.sockets.on('connection', function (socket) {\r\n  socket.emit('news', { hello: 'world' });\r\n  socket.on('my other event', function (data) {\r\n    console.log(data);\r\n  });\r\n});*/\r\nio.sockets.on('error',function(err){\r\n         console.log('error catch!',err);\r\n});\r\n\r\nio.sockets.on('connection', function (socket) {\r\n    var hs = socket.handshake;\r\n    console.log('A socket with sessionID ' + hs.sessionID \r\n        + ' connected!');\r\n    // setup an inteval that will keep our session fresh\r\n    var intervalID = setInterval(function () {\r\n        // reload the session (just in case something changed,\r\n        // we don't want to override anything, but the age)\r\n        // reloading will also ensure we keep an up2date copy\r\n        // of the session with our connection.\r\n        hs.session.reload( function () { \r\n            // \"touch\" it (resetting maxAge and lastAccess)\r\n            // and save it back again.\r\n            hs.session.touch().save();\r\n        });\r\n    }, 60 * 1000);\r\n    socket.on('disconnect', function () {\r\n        console.log('A socket with sessionID ' + hs.sessionID \r\n            + ' disconnected!');\r\n        // clear the socket interval to stop refreshing the session\r\n        clearInterval(intervalID);\r\n    });\r\n    \r\n    socket.on('error', function() {\r\n        console.log('error catch!');\r\n    });\r\n \r\n});\r\n\r\n//Multiplexing\r\nvar channel1 = io\r\n  .of('/channel1')\r\n  .on('connection', function (socket) {\r\n    socket.emit('news', {\r\n        that: 'only'\r\n      , '/channel1': 'will get'\r\n    });\r\n    socket.emit('news', {\r\n        everyone: 'in'\r\n      , '/channel1': 'will get'\r\n    });\r\n    socket.on('error', function() {\r\n        console.log('error catch!');\r\n    });\r\n  });\r\n\r\nvar channel2 = io\r\n  .of('/channel2')\r\n  .on('connection', function (socket) {\r\n    socket.on('error', function() {\r\n        console.log('error catch!');\r\n    });\r\n    socket.emit('news', { news: 'item' });\r\n  });\r\n  \r\n  channel2.on('my other event',function(res){\r\n      console.log('other evt:',res);\r\n  })\r\n\r\n/************* FLICKR for storing photos **************/\r\n\r\nvar FlickrAPI= require('./flickrnode/lib/flickr').FlickrAPI;\r\nvar sys= require('util'); \r\nvar flickr= new FlickrAPI(FLICKR_KEY, FLICKR_SECRET);\r\nvar flickrFrob;\r\nvar flickrAuthToken\r\nflickr.getLoginUrl(\"write\", null, function(error, url, frob) {\r\n    console.log(\"Visit\",url);\r\n    console.log(\"frob\",frob);\r\n    flickrFrob=frob;    \r\n});\r\n\r\napp.get('/socket.io/*',function(req,res){\r\n    console.log(\"Io Req\",req.url);\r\n    });\r\n\r\napp.get('/auth/flickr/callback', function(req,res){\r\n  console.log(\"frob\",req.query.frob);  \r\n  var status = 'success';\r\n  flickr.auth.getToken(req.query.frob, function(error, result){\r\n      if(error){\r\n          status = err;\r\n      }else{\r\n          console.log(\"flickrFrob\",flickrFrob);\r\n          console.log(\"Res\",result);\r\n          flickrAuthToken = result.token;\r\n          flickr.setAuthenticationToken(flickrAuthToken);\r\n      }\r\n      res.send(status+\"  <br/> Go back to <a href='/'>Home</a>\");\r\n    });\r\n});\r\n\r\n\r\n\r\n//console.log(\"flickFrob\",flickrFrob);\r\n//console.log(\"flickAuthToken\",flickrFrob);\r\n\r\n/*flickr.setAuthenticationToken(flickr_oauth.auth.access_token.oauth_token);\r\nflickr.people.getInfo(function(res){\r\n    console.log(\"flick infos\",res);\r\n    });*/\r\n//Check here: https://github.com/ciaranj/flickrnode/blob/master/lib/request.js. Build your own uploader then :) You should use Oauth ? Yes Make a new signature.\r\n//http://www.flickr.com/services/api/explore/flickr.auth.oauth.getAccessToken\r\n//http://www.flickr.com/services/api/auth.oauth.html\r\n//Here is engineering\r\n\r\nfunction sendPhoto(photo){\r\n  // An object of options to indicate where to post to\r\n  var post_options = {\r\n      host: 'http://api.flickr.com/services/upload/',\r\n      port: '80',\r\n      path: '/compile',\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'Content-Length': photo.length\r\n      }\r\n  };\r\n\r\n  // Set up the request\r\n  var post_req = http.request(post_options, function(res) {\r\n      res.setEncoding('utf8');\r\n      res.on('data', function (chunk) {\r\n          console.log('Response: ' + chunk);\r\n      });\r\n  });\r\n\r\n  // post the data\r\n  post_req.write(photo);\r\n  post_req.end();\r\n\r\n}\r\n\r\n/***********  Auth Strategies **********************/\r\npassport.use(new GoogleStrategy({\r\n    returnURL: app.settings.delait_protocol+'://'+app.settings.dealit_host+':'+app.settings.dealit_port+'/auth/google/callback',\r\n    realm: app.settings.delait_protocol+'://'+app.settings.dealit_host+':'+app.settings.dealit_port+'/'\r\n  },\r\n   function(identifier, profile, done) {  \r\n    process.nextTick(function () {      \r\n      profile.identifier = identifier;\r\n      console.log(\"Google profile :\",profile);\r\n      return done(null, profile);\r\n    });\r\n  }\r\n));\r\n\r\n\r\npassport.use(new FacebookStrategy({\r\n    clientID: app.settings.env,\r\n    clientSecret: FACEBOOK_APP_SECRET,\r\n    callbackURL: app.settings.delait_protocol+'://'+app.settings.dealit_host+':'+app.settings.dealit_port+'/auth/facebook/callback'\r\n  },\r\n  function(accessToken, refreshToken, profile, done) {   \r\n    console.log(\"Facebook profile :\",profile); \r\n    return done(null, profile);    \r\n  }\r\n));\r\n\r\npassport.use(new TwitterStrategy({\r\n    consumerKey: TWITTER_APP_ID,\r\n    consumerSecret: TWITTERK_APP_SECRET,\r\n    callbackURL: app.settings.delait_protocol+'://'+app.settings.dealit_host+':'+app.settings.dealit_port+'/auth/twitter/callback'\r\n  },\r\n  function(token, tokenSecret, profile, done) {\r\n    console.log(\"Twitter profile :\",profile); \r\n    return done(null, profile);       \r\n  }\r\n));\r\n\r\n\r\n/************* Routes *****************************************/\r\napp.get('/logout', function(req, res){\r\n  req.logout();\r\n  req.session.destroy();\r\n  res.redirect('/');\r\n});\r\n\r\napp.get('/login', function(req, res){    \r\n  res.render('login',{userName:\"Guest\",isAuthenticated:req.session.isAuthenticated});\r\n});\r\n\r\napp.get('/auth/google', \r\n  passport.authenticate('google', { failureRedirect: '/login' }),\r\n  function(req, res) {\r\n    res.redirect('/');\r\n  });\r\n\r\napp.get('/auth/google/callback', \r\n  passport.authenticate('google', { failureRedirect: '/login' }),\r\n  function(req, res) {    \r\n    req.session.user = {userName:req.user.displayName,id:req.user.emails[0].value,profile:req.user.identifier, type:'google'};\r\n    req.session.isAuthenticated=true;\r\n    res.redirect('/');\r\n  });\r\n  \r\n  app.get('/auth/facebook', \r\n  passport.authenticate('facebook', { failureRedirect: '/login',scope: ['email', 'manage_notifications']  }),\r\n  function(req, res) {\r\n    res.redirect('/');\r\n  });\r\n\r\napp.get('/auth/facebook/callback', \r\n  passport.authenticate('facebook', { failureRedirect: '/login' }),\r\n  function(req, res) {\r\n    req.session.user = {userName:req.user.displayName,id:req.user.id,profile:req.user.profileUrl, type:'facebook'};\r\n    req.session.isAuthenticated=true;\r\n    res.redirect('/');\r\n  }); \r\n\r\napp.get('/auth/twitter', \r\n  passport.authenticate('twitter', { failureRedirect: '/login' }),\r\n  function(req, res) {    \r\n    res.redirect('/');\r\n  });\r\n\r\napp.get('/auth/twitter/callback', \r\n  passport.authenticate('twitter', { failureRedirect: '/login' }),\r\n  function(req, res) {\r\n    req.session.user = {userName:req.user.displayName,id:req.user.id,profile:req.user.id, type:'twitter'};\r\n    req.session.isAuthenticated=true;\r\n    res.redirect('/');\r\n  });\r\n\r\napp.get('/', function(req, res){     \r\n    \r\n    var userName = (req.session.user)?req.session.user.userName:'Guest';\r\n    res.render('maps',{productFields:[['category','select','Hospital',['Pharmacy','Parking','Hospital','Hotel','SuperMarket','Train-Airport','Religious','Club','Ministry','Company','Restaurant','Cinema','School-Faculty']]\r\n                        ,['title','text'],['price','number',0],['isAvailable','checkbox',true]\r\n                        ,['owner','text'],['description','textarea'],['offlineDate','date']]\r\n                    , userName:userName, isAuthenticated:req.session.isAuthenticated});\r\n    //res.send(\"Hello\");\r\n});\r\n\r\nfunction fetchMongoUser(req){\r\n    //find mongoUser \r\n    var mongoUser = req.session.mongoUser;\r\n    if(mongoUser) return;\r\n    //else find in mongoDB\r\n    console.log(\"searching in mongoDB \");\r\n    var data = {};\r\n    User.find().where('userId',req.session.user.id).exec(function(err,res){\r\n        if(err){\r\n            console.log(\"getUser error: \",err);            \r\n        }else{\r\n            if(res){\r\n                req.session.mongoUser=res;\r\n                console.log(\"1. saving to session \",req.session.mongoUser);\r\n            }else{ \r\n                mongoUser = new User({userId:req.session.user.id, erronous:0, likes:0, dislikes:0, marks:0, coef:1});\r\n                mongoUser.save(function(err2){\r\n                    if(err2){\r\n                        console.log(\"mongoUser save Error: \",err2);\r\n                    }else{\r\n                        req.session.mongoUser=mongoUser;     \r\n                        console.log(\"2. saving to session \",req.session.mongoUser);\r\n                    }\r\n                });                \r\n            }\r\n        }\r\n    }); \r\n}\r\n\r\n\r\napp.post('/score', function(req, res){     \r\n    //find in session\r\n      //find mongoUser \r\n    var mongoUser = req.session.mongoUser;\r\n    if(mongoUser) res.json({user:mongoUser});;\r\n    //else find in mongoDB\r\n    console.log(\"searching in mongoDB \");\r\n    var data = {};\r\n    User.find().where('userId',req.session.user.id).exec(function(err,res){\r\n        if(err){\r\n            console.log(\"getUser error: \",err); \r\n            res.json({user:\"\"});\r\n        }else{\r\n            if(res){\r\n                req.session.mongoUser=res;\r\n                console.log(\"1. saving to session \",req.session.mongoUser);\r\n                var mongoUser = req.session.mongoUser;    \r\n                res.json({user:mongoUser});\r\n            }else{ \r\n                mongoUser = new User({userId:req.session.user.id, erronous:0, likes:0, dislikes:0, marks:0, coef:1});\r\n                mongoUser.save(function(err2){\r\n                    if(err2){\r\n                        console.log(\"mongoUser save Error: \",err2);\r\n                        res.json({user:\"\"});\r\n                    }else{\r\n                        req.session.mongoUser=mongoUser;     \r\n                        console.log(\"2. saving to session \",req.session.mongoUser);\r\n                        res.json({user:mongoUser});\r\n                    }\r\n                });                \r\n            }\r\n        }\r\n    });\r\n    \r\n    /*console.log(\"Fetched mongoUser: \",mongoUser);\r\n    //score it\r\n    switch(req.body.scoretype){\r\n        case enums.scores.mark:\r\n             break;\r\n        case enums.scores.like:\r\n             break;\r\n        case enums.scores.unlike:\r\n             break;\r\n        case enums.scores.erronous:\r\n             break;    \r\n    }*/\r\n});\r\n\r\n\r\napp.post('/saveproduct',ensureAuthenticated, function(req, res){\r\n    console.log(\"Save prod\");\r\n    if(req.files && req.files.picture){\r\n        flickr.upload.async(req.files.picture.path, req.body.category+'_'+req.body.title, {}, function(err,ticket){\r\n            var photoUrl = 'n/a';\r\n            if(err){\r\n                console.log(\"Error\",err);\r\n                return saveProduct(req,res); \r\n            }else{                \r\n                console.log(\"Ticket\",ticket);                \r\n                flickr.photos.getSizes(ticket, 0, function(err2, sizes, idx){\r\n                    if(err2){\r\n                        console.log(\"Error\",err2);\r\n                        return saveProduct(req,res); \r\n                    }else{\r\n                        photoUrl = sizes.size[3].source;\r\n                        console.log(\"source\",photoUrl);\r\n                        return saveProduct(req,res,photoUrl);\r\n                        //remove picture from upload.\r\n                        fs.unlink(req.files.picture.path, function(err3) {\r\n                            if (err3) {\r\n                                console.log(\"Error\",err2);\r\n                            }else{\r\n                                res.send('File removed');\r\n                            }\r\n                        });\r\n                    }\r\n                });     \r\n            }            \r\n        });\r\n    }else{\r\n        return saveProduct(req,res); \r\n    }\r\n});\r\n\r\napp.post('/deleteproduct',ensureAuthenticated, function(req, res){\r\n  Product.remove({_id:req.body._id},function(err){\r\n          if(err){\r\n            console.log(req.body._id,\"Error deleting:\",err);\r\n            res.json({status:'failure'});\r\n          } else{\r\n              res.json({status:'success'});\r\n          }\r\n      });  \r\n}); \r\n\r\napp.post('/storelocation/:pageNumber', function(req, res){\r\n  // Perhaps we posted several items with a form\r\n  // (use the bodyParser() middleware for this)  \r\n  req.session.location = req.body.location;  \r\n  var sldocs ={};\r\n  var resultsPerPage=25;\r\n  var skipFrom = (req.params.pageNumber) * resultsPerPage;\r\n  var slhandler = (function(scop){\r\n      return function(err, docs){\r\n        if(err){\r\n             console.log(\"findProductNear Error:\",err);             \r\n        }else{            \r\n            sldocs = docs;\r\n        } \r\n        //res.partial('partials/product',locProducts);\r\n        res.json({products:sldocs});\r\n        console.log(\"findProductNear (loc,docs): \",req.session.location,sldocs.length,\"Items\"); \r\n      }\r\n  })(sldocs);\r\n  var filters = {category:req.body.category};\r\n  if(req.body.keywords){\r\n      var or = [];\r\n      for(var i=0; i<req.body.keywords.length;i++){\r\n          or[i]={ title : { $regex : new RegExp('\\\\W*'+req.body.keywords[i]+'\\\\W*','i') } };\r\n      }\r\n      filters = {category:req.body.category,$or:or};\r\n  }\r\n  console.log(\"filters\",filters);\r\n  //Product.find(filters).near('location',req.session.location).limit(50).exec(slhandler);  \r\n  Product.find(filters).near('location',req.session.location).skip(skipFrom).limit(resultsPerPage).exec(slhandler);\r\n  \r\n});\r\n\r\n\r\n//setup the errors\r\napp.error(function(err, req, res, next){\r\n    if (err instanceof NotFound) {\r\n        res.render('404.jade', { locals: { \r\n                  title : '404 - Not Found'\r\n                 ,description: ''\r\n                 ,author: ''\r\n                 ,analyticssiteid: 'XXXXXXX' \r\n                },status: 404 });\r\n    } else {\r\n        res.render('500.jade', { locals: { \r\n                  title : 'The Server Encountered an Error'\r\n                 ,description: ''\r\n                 ,author: ''\r\n                 ,analyticssiteid: 'XXXXXXX'\r\n                 ,error: err \r\n                },status: 500 });\r\n    }\r\n});\r\n\r\n//A Route for Creating a 500 Error (Useful to keep around)\r\napp.get('/500', function(req, res){\r\n    throw new Error('This is a 500 Error');\r\n});\r\n\r\n//The 404 Route (ALWAYS Keep this as the last route)\r\n/*app.get('/*', function(req, res){\r\n    throw new NotFound;\r\n});*/\r\n\r\n\r\nNotFound.prototype.__proto__ = Error.prototype;\r\n\r\nfunction NotFound(msg){\r\n    this.name = 'NotFound';\r\n    Error.call(this, msg);\r\n    Error.captureStackTrace(this, arguments.callee);\r\n}\r\n\r\n/************************************** Server functions *************************/\r\n\r\nfunction saveProduct(req,res,photoUrl){\r\n       var data =  {title:req.body.title\r\n          ,category:req.body.category\r\n          ,price:req.body.price\r\n          ,description:req.body.description\r\n          ,owner:req.body.owner\r\n          ,picture:photoUrl\r\n          ,offlineDate:req.body.offlineDate\r\n          ,isAvailable:req.body.isAvailable\r\n          ,location:[req.body.locationLng,req.body.locationLat]\r\n          ,locationStr:req.body.locationStr\r\n          };  \r\n          \r\n    if(req.body._id){\r\n        data =  {title:req.body.title\r\n          ,category:req.body.category\r\n          ,price:req.body.price\r\n          ,description:req.body.description\r\n          ,owner:req.body.owner          \r\n          ,offlineDate:req.body.offlineDate\r\n          ,isAvailable:req.body.isAvailable          \r\n          };\r\n      if(photoUrl) data.picture = photoUrl;\r\n      var conditions = { _id:req.body._id }\r\n      , options = { multi: true };    \r\n        Product.update(conditions, data, options, function (err, numAffected) {\r\n          if(err){\r\n              console.log(req.body._id,\" update failed\");\r\n              res.json({status:'failure'});\r\n              res.json({status:'success'});\r\n          }\r\n          console.log(req.body._id,\" updated (\",numAffected,\" update(s) )\");\r\n        }); \r\n        \r\n    }else{\r\n        var prd = new Product(data);\r\n        prd.save(function(err){\r\n              if(err){\r\n                console.log(prd.title,\"Error saving:\",err);\r\n                res.json({status:'failure'});\r\n              } else{\r\n                  res.json({status:'success'});\r\n                  console.log(req.body.title,\" created \");\r\n              }   \r\n        });\r\n    }\r\n}\r\n\r\n\r\n/********** Connection à MongoDB ******/\r\nconsole.time(\"MongoDb init\");\r\nvar mongoose = require('mongoose');\r\nvar userMongoose = mongoose.createConnection(MONGO_USERS_URL);\r\nmongoose.connect(MONGO_URL);\r\nvar Schema = mongoose.Schema\r\n  , ObjectId = Schema.ObjectId;\r\n\r\n//Schema\r\nvar ScoreSchema = new Schema({\r\n    userId      : Number,\r\n    mark        : Number,\r\n    threeWords  : [String]\r\n});\r\n\r\nvar UserSchema  = new Schema({\r\n    userId      : String,\r\n    erronous    : Number,\r\n    likes       : Number,\r\n    dislikes    : Number,\r\n    marks       : Number,\r\n    coef        : Number    \r\n});\r\nUserSchema.index({userId:1});\r\n\r\nvar ProductSchema = new Schema({\r\n    id          : ObjectId\r\n  , category    : String    \r\n  , title       : String\r\n  , description : String\r\n  , price       : String\r\n  , isAvailable : Boolean\r\n  , onlineDate  : Date\r\n  , offlineDate : Date\r\n  , owner       : String\r\n  , likes       : Number\r\n  , dislikes    : Number\r\n  , marks       : Number\r\n  , erronous    : Number\r\n  , likesMap    : [String]\r\n  , dislikesMap : [String]  \r\n  , erronousMap : [String]\r\n  , marksMap    : [ScoreSchema]\r\n  , picture     : String\r\n  , locationStr : String\r\n  , location    : [Number]\r\n  , locked      : Boolean\r\n});\r\nProductSchema.index({location:\"2d\",marks:1,category:1,title:1,description:1,isAvailable:1});\r\nvar Product = mongoose.model('Product',ProductSchema);\r\nvar User    = userMongoose.model('User',UserSchema);\r\n \r\n\r\nconsole.timeEnd(\"MongoDb init\");\r\n\r\nfunction findProductNear(loc){\r\n      var data =  ['title'\r\n          ,'category'\r\n          ,'price'\r\n          ,'description'\r\n          ,'offlineDate'\r\n          ,'likes'\r\n          ,'dislikes'\r\n          ,'marks'\r\n          ,'erronous'\r\n          ,'owner'\r\n          ,'picture'\r\n          ,'location'\r\n          ,'locationSt'];\r\n    var docs={};\r\n    Product.find({},data).where('location').near(loc).exec(getRes);    \r\n    \r\n function getRes(err, res){\r\n        if(err){\r\n             console.log(\"findProductNear Error:\",err);\r\n             return '{}';\r\n        }else{            \r\n            //console.log(\"findProductNear (loc,docs): \",loc,docs);\r\n            docs = res;\r\n        }\r\n    }\r\n    return docs;\r\n}\r\n/**** User management ***/\r\n\r\n\r\n/****  End User management   ****/\r\n\r\nfunction ensureAuthenticated(req, res, next) {\r\n  console.log(\"Ensure\",req.session.isAuthenticated);\r\n  if (req.session.isAuthenticated) { return next(); }\r\n  res.redirect('/login')\r\n}\r\n\r\n\r\napp.listen(appPort);\r\n"]],"start1":0,"start2":0,"length1":0,"length2":26486}]],"length":26486}
